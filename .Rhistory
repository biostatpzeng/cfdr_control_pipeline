f2=fdp_cf1_fdr3_adj0_dist1_fold2
f3=fdp_cf1_fdr3_adj0_dist1_fold3
xx=n1p+n1pq
w=which(pmin(f1,f2,f3)> -0.5 & xx==0)
ff=c(f1[w],f2[w],f3[w])
mean(ff)
1-pbinom(sum(ff),length(ff),0.1)
f1=fdp_cf1_fdr3_adj0_dist1_fold1
f2=fdp_cf1_fdr3_adj0_dist1_fold2
f3=fdp_cf1_fdr3_adj0_dist1_fold3
xx=n1p+n1pq
w=which(pmin(f1,f2,f3)> -0.5 & xx==0 & dist1==2)
ff=c(f1[w],f2[w],f3[w])
f1=fdp_cf1_fdr3_adj0_dist1_fold1
f2=fdp_cf1_fdr3_adj0_dist1_fold2
f3=fdp_cf1_fdr3_adj0_dist1_fold3
xx=n1p+n1pq
w=which(pmin(f1,f2,f3)> -0.5 & xx==0 & dist1==2)
ff=c(f1[w],f2[w],f3[w])
1-pbinom(sum(ff),length(ff),0.1)
f1=fdp_cf1_fdr3_adj0_dist1_fold1
f2=fdp_cf1_fdr3_adj0_dist1_fold2
f3=fdp_cf1_fdr3_adj0_dist1_fold3
xx=n1p+n1pq
w=which(pmin(f1,f2,f3)> -0.5 & xx==0 & dist1==1)
ff=c(f1[w],f2[w],f3[w])
1-pbinom(sum(ff),length(ff),0.1)
f1=fdp_cf1_fdr3_adj0_dist1_fold1
f2=fdp_cf1_fdr3_adj0_dist1_fold2
f3=fdp_cf1_fdr3_adj0_dist1_fold3
xx=n1p+n1pq
w=which(pmin(f1,f2,f3)> -0.5 & xx==0 & dist1==2)
ff=c(f1[w],f2[w],f3[w])
1-pbinom(sum(ff),length(ff),0.1)
f1=fdp_cf1_fdr3_adj0_dist1_fold1
f2=fdp_cf1_fdr3_adj0_dist1_fold2
f3=fdp_cf1_fdr3_adj0_dist1_fold3
xx=n1p+n1pq
w=which(pmin(f1,f2,f3)> -0.5 & xx==0 & dist1==3)
ff=c(f1[w],f2[w],f3[w])
1-pbinom(sum(ff),length(ff),0.1)
f1=fdp_cf1_fdr3_adj0_dist1_fold1
f2=fdp_cf1_fdr3_adj0_dist1_fold2
f3=fdp_cf1_fdr3_adj0_dist1_fold3
xx=n1p+n1pq
w=which(pmin(f1,f2,f3)> -0.5 & xx==0 & n1q=10)
ff=c(f1[w],f2[w],f3[w])
1-pbinom(sum(ff),length(ff),0.1)
f1=fdp_cf1_fdr3_adj0_dist1_fold1
f2=fdp_cf1_fdr3_adj0_dist1_fold2
f3=fdp_cf1_fdr3_adj0_dist1_fold3
xx=n1p+n1pq
w=which(pmin(f1,f2,f3)> -0.5 & xx==0 & n1q==10)
ff=c(f1[w],f2[w],f3[w])
1-pbinom(sum(ff),length(ff),0.1)
f1=fdp_cf1_fdr3_adj0_dist1_fold1
f2=fdp_cf1_fdr3_adj0_dist1_fold2
f3=fdp_cf1_fdr3_adj0_dist1_fold3
xx=n1p+n1pq
w=which(pmin(f1,f2,f3)> -0.5 & xx==0 & n1q==200)
ff=c(f1[w],f2[w],f3[w])
1-pbinom(sum(ff),length(ff),0.1)
f1=fdp_cf1_fdr3_adj0_dist1_fold1
f2=fdp_cf1_fdr3_adj0_dist1_fold2
f3=fdp_cf1_fdr3_adj0_dist1_fold3
xx=n1p+n1pq
w=which(pmin(f1,f2,f3)> -0.5 & xx==0 & n1q==0)
ff=c(f1[w],f2[w],f3[w])
1-pbinom(sum(ff),length(ff),0.1)
if (file.exists("/home/hpc")) home_dir="/home/hpc/" else home_dir="/home/ajl88/"
#system(paste0("cat ",home_dir,"cfdr/sims/fdrsim/cfdrsim*> ",home_dir,"cfdr/sims/summary/cfdrsimmatrix.txt"))
rx=read.table(paste0(home_dir,"cfdr/sims/summary/cfdrsimmatrix0.txt"))
nfold=3
vars=c("hit_p",as.vector(
outer(as.vector(
outer(as.vector(
outer(as.vector(
outer(0:1,1:5,function(x,y) paste0("_fdr",y,"_adj",x))),
1:2,function(x,y) paste0(x,"_dist",y))),
1:3,function(x,y) paste0("hit_cf",y,x))),
c("",paste0("_fold",1:nfold)),function(x,y) paste0(x,y))))
vars=vars[which(
(grepl("fdr3",vars) & grepl("fold",vars)) |
(!grepl("fold",vars)))]
vars=gsub("fdr5","fdr3b",vars)
n1=c("seed","alpha","N","dist1","dist2","n1p","n1q","n1pq","sp","sq",
paste0("fit_",c("pi0","pi1","pi2","tau1","tau2","s1","s2","conv")),"pi0_null","sigma_null")
n2=gsub("hit","fdp",vars)
n3=gsub("hit","t2r",vars)
colnames(rx)=c(n1,n2,n3)
save(rx,file=paste0(home_dir,"cfdr/sims/summary/cfdrsimmatrix0.RData"))
dim(rx)
detach(rx)
detach(rx)
attach(rx)
f1=fdp_cf1_fdr3_adj0_dist1_fold1
f2=fdp_cf1_fdr3_adj0_dist1_fold2
f3=fdp_cf1_fdr3_adj0_dist1_fold3
xx=n1p+n1pq
w=which(pmin(f1,f2,f3)> -0.5 & xx==0 & n1q==0)
ff=c(f1[w],f2[w],f3[w])
1-pbinom(sum(ff),length(ff),0.1)
mean(ff)
f1=fdp_cf1_fdr3_adj1_dist1_fold1
f2=fdp_cf1_fdr3_adj1_dist1_fold2
f3=fdp_cf1_fdr3_adj1_dist1_fold3
xx=n1p+n1pq
w=which(pmin(f1,f2,f3)> -0.5 & xx==0 & n1q==0)
ff=c(f1[w],f2[w],f3[w])
1-pbinom(sum(ff),length(ff),0.1)
mean(ff)
mean(f1[w])
mean(f2[w])
mean(f=3[w])
mean(f3[w])
f1=fdp_cf1_fdr3_adj1_dist1_fold1
f2=fdp_cf1_fdr3_adj1_dist1_fold2
f3=fdp_cf1_fdr3_adj1_dist1_fold3
f4=fdp_cf1_fdr4_adj1_dist1
xx=n1p+n1pq
w=which(pmin(f1,f2,f3,4)> -0.5 & xx==0 & n1q==0)
ff=c(f1[w],f2[w],f3[w])
1-pbinom(sum(ff),length(ff),0.1)
mean(f4[w])
f1=fdp_cf1_fdr3_adj1_dist1_fold1
f2=fdp_cf1_fdr3_adj1_dist1_fold2
f3=fdp_cf1_fdr3_adj1_dist1_fold3
f4=fdp_cf1_fdr4_adj1_dist1
xx=n1p+n1pq
w=which(pmin(f1,f2,f3,f4)> -0.5 & xx==0 & n1q==0)
ff=c(f1[w],f2[w],f3[w])
1-pbinom(sum(ff),length(ff),0.1)
max(f4)
debugSource('/home/hpc/cfdr/Code/cfdr/R/functions.R')
debugSource('~/Desktop/stupid_r.R')
p=runif(1000); q=runif(1000);
vv=vl(p,q,indices=1:10,adj=F,mode=1)
vv=vl(p,q,indices=1:10,adj=T,mode=1)
vv=vl(p,q,indices=1:10,adj=T,mode=1)
debugSource('~/Desktop/stupid_r.R')
vv=vl(p,q,indices=1:10,adj=T,mode=1)
ccut[i]
ccut[i]
ccut[i]
ccut
ccut[i]
ccut[i]
correctx[zq_ind[indices[i]]]
length(pval2)
length(correctx)
length(xval2)
length(yval2)
plot(yval2,correctx)
plot(yval2,correctx,type="l")
yval2[zq_ind[indices[i]]]
abline(v=0.3)
abline(h=correctx[zq_ind[indices[i]]])
correctx[zq_ind[indices[i]]]
ff(yval2,correctx,zq[indices[i]])
ff(correctx,yval2,zq[indices[i]])
zq[indices[i]]
ff(rev(correctx),rev(yval2),zq[indices[i]])
source('~/Desktop/stupid_r.R')
vv=vl(p,q,indices=1:100,adj=T,mode=1)
vv=vl(p,q,indices=1:10,adj=T,mode=1)
vv=vl(p,q,indices=1:200,adj=T,mode=1)
plot(ccut)
plot(correctx[zq_ind[indices]])
alt=c(); for (i in 1:length(indices)) alt=c(alt,ff(rev(correctx),rev(yval2),zq[indices[i]]))
plot(correctx[zq_ind[indices]],alt)
length(alt)
length(indices)
alt=c(); for (i in 1:length(indices)) alt=c(alt,ff(rev(correctx),rev(yval2),zq[indices[i]]))
lengh(alt)
length(alt)
ff(rev(correctx),rev(yval2),zq[indices[i]])
length(indices)
alt=c(); for (i in 1:200) alt=c(alt,ff(rev(correctx),rev(yval2),zq[indices[i]]))
alt=c(); for (ii in 1:200) alt=c(alt,ff(rev(correctx),rev(yval2),zq[indices[ii]]))
length(alt)
for (ii in 1:200) alt=c(alt,ff(rev(correctx),rev(yval2),zq[indices[ii]]))
length(alt)
ff(rev(correctx),rev(yval2),zq[indices[1]])
ff(rev(correctx),rev(yval2),zq[indices[2]])
ff(rev(correctx),rev(yval2),zq[indices[3]])
ff(rev(correctx),rev(yval2),zq[indices[ii]])
ii=1
alt=rep(0,200)
for (i in 1:200) alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]])
max(alt)
for (i in 1:200) {
alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]])
}
vv=vl(p,q,indices=1:200,adj=T,mode=1)
alt=rep(0,200); for (i in 1:200) alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]])
alt
i=1
s=rep(0,200); alt=rep(0,200)
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
s[i]=correctx[zq_ind[indices[i]]]; alt[i]=ff(rev(correctx),rev(yval2),zq[indices[i]]); i=i+1
plot(s,alt)
plot(s-alt)
source('~/.active-rstudio-document')
plot(v1$x[1,],v1$y)
plot(v1$x[1,],v1$y,type="l")
lines(v2$x[1,],v2$y,col="red")
i=i+1
v1=vl(p,q,indices=i,mode=2,fold=i,adj=T)
v2=vl(p,q,indices=i,mode=1,adj=T)
plot(v1$x[1,],v1$y,type="l")
lines(v2$x[1,],v2$y,col="red")
i=i+1
v1=vl(p,q,indices=i,mode=2,fold=i,adj=T)
v2=vl(p,q,indices=i,mode=1,adj=T)
plot(v1$x[1,],v1$y,type="l")
lines(v2$x[1,],v2$y,col="red")
i=i+1
v1=vl(p,q,indices=i,mode=2,fold=i,adj=T)
v2=vl(p,q,indices=i,mode=1,adj=T)
plot(v1$x[1,],v1$y,type="l")
lines(v2$x[1,],v2$y,col="red")
i=i+1
v1=vl(p,q,indices=i,mode=2,fold=i,adj=T)
v2=vl(p,q,indices=i,mode=1,adj=T)
plot(v1$x[1,],v1$y,type="l")
lines(v2$x[1,],v2$y,col="red")
i=i+1
v1=vl(p,q,indices=i,mode=2,fold=i,adj=T)
v2=vl(p,q,indices=i,mode=1,adj=T)
plot(v1$x[1,],v1$y,type="l")
lines(v2$x[1,],v2$y,col="red")
i=i+1
v1=vl(p,q,indices=i,mode=2,fold=i,adj=T)
v2=vl(p,q,indices=i,mode=1,adj=T)
plot(v1$x[1,],v1$y,type="l")
lines(v2$x[1,],v2$y,col="red")
i=i+1
v1=vl(p,q,indices=i,mode=2,fold=i,adj=T)
v2=vl(p,q,indices=i,mode=1,adj=T)
plot(v1$x[1,],v1$y,type="l")
lines(v2$x[1,],v2$y,col="red")
source('~/Desktop/stupid_r.R')
i=i-2
i=i+1
v1=vl(p,q,indices=i,mode=2,fold=i,adj=T)
v2=vl(p,q,indices=i,mode=1,adj=T)
plot(v1$x[1,],v1$y,type="l")
lines(v2$x[1,],v2$y,col="red")
i=i+1
v1=vl(p,q,indices=i,mode=2,fold=i,adj=T)
v2=vl(p,q,indices=i,mode=1,adj=T)
plot(v1$x[1,],v1$y,type="l")
lines(v2$x[1,],v2$y,col="red")
which.max(abs(v1$x[1,]-v2$x[1,]))
i-1
i=7
i=7
v1=vl(p,q,indices=i,mode=2,fold=i,adj=T)
v2=vl(p,q,indices=i,mode=1,adj=T)
plot(v1$x[1,],v1$y,type="l")
lines(v2$x[1,],v2$y,col="red")
i=8
i=8
v1=vl(p,q,indices=i,mode=2,fold=i,adj=T)
v2=vl(p,q,indices=i,mode=1,adj=T)
plot(v1$x[1,],v1$y,type="l")
lines(v2$x[1,],v2$y,col="red")
i=8
v1=vl(p,q,indices=i,mode=2,fold=i,adj=T)
ccut
i=8
v2=vl(p,q,indices=i,mode=1,adj=T)
ccut
if (adj) {
correct=cummin((1+ecdf(q[-fold][which(p[-fold]>0.5)])(pval2)*length(p[-fold]))/
(1+ ecdf(q[-fold])(pval2)*length(p[-fold])))
if (!is.null(indices)) correct_ccut=approx(pval2,correct,q[indices],rule=2)$y #cummin((1+ecdf(pc[which(p>0.5)])(pc)*length(p))/(1+ rank(pc)))
} else {
correct=rep(1,length(pval2)) # adjustment factor for pc[i]
correct_ccut=rep(1,length(ccut))
}
if (!is.null(indices)) ccut=ccut*correct_ccut
zp_ind=ceiling(zp[indices]*nt/mx); zp_ind=pmax(1,pmin(zp_ind,nt))
zq_ind=ceiling(zq[indices]*nv/my); zq_ind=pmax(1,pmin(zq_ind,nv))
which.max(abs(v1$x[1,]-v2$x[1,]))
i=8
v1=vl(p,q,indices=i,mode=2,fold=i,adj=T)
par(mfrow=c(1,2))
i=45
w=which(zq[-fold] > yval2[i])
cfsub= (1+(1/length(w)))*ptest/(1+(1/length(w))-ecdf(zp[-fold][w])(xtest)); cfsub=cummin(cfsub)
par(mfrow=c(1,1))
plot(xtest,cfsub,type="l")
correct[i]
i=8
v2=vl(p,q,indices=i,mode=1,adj=T)
dim(cfx)
length(yval2)
lines(xtest,cfx[,45],col="red")
correctx[i]
length(correctx)
plot(xtest,correctx,type="l")
plot(yval2,correctx,type="l")
i
correctx[45]
i=8
v1=vl(p,q,indices=i,mode=2,fold=i,adj=T)
v2=vl(p,q,indices=i,mode=1,adj=T)
plot(v1$x[1,],v1$y,type="l")
lines(v2$x[1,],v2$y,col="red")
i=8
v1=vl(p,q,indices=i,mode=2,fold=i,adj=T)
v2=vl(p,q,indices=i,mode=1,adj=T)
plot(v1$x[1,],v1$y,type="l")
lines(v2$x[1,],v2$y,col="red")
i=8
v1=vl(p,q,indices=i,mode=2,fold=i,adj=T,nv=5000)
v2=vl(p,q,indices=i,mode=1,adj=T,nv=5000)
plot(v1$x[1,],v1$y,type="l")
lines(v2$x[1,],v2$y,col="red")
###########################################################################
##                                                                       ##
## Assess improvements to false-discovery rate control in cFDR method    ##
##                                                                       ##
## James Liley, 15/2/18                                                  ##
##                                                                       ##
###########################################################################
# Clear existing environment
rm(list=ls())
###########################################################################
## Packages and scripts ###################################################
###########################################################################
library(mnormt)
library(mgcv)
library(Subtest)
library(pbivnorm)
library(MASS)
library(fields)
library(matrixStats)
if (file.exists("/home/hpc")) home_dir="/home/hpc/" else home_dir="/home/ajl88/"
###########################################################################
## Functions ##############################################################
###########################################################################
source(paste0(home_dir,"cfdr/Code/cfdr/R/functions.R"))
###########################################################################
## Simulation parameters ##################################################
###########################################################################
options(digits.secs=8)
seed=as.numeric(substr(Sys.time(),21,27))
set.seed(seed)
distx=sample(3,1)  # 1 for normal, 2 for t (3df), 3 for Cauchy
par_cont=runif(1);
if (par_cont>0.5) { # select pars from a discrete distribution
alpha= 0.1 ################################# sample(c(0.1,0.01),1) # try and control FDR at this level
nsnp=sample(c(1000,10000),1)
n1p=sample(c(0,10,200),1) # number of variants associated ONLY with A (principal)
n1q=sample(c(0,10,200),1) # number of variants associated ONLY with B (principal)
n1pq=sample(c(0,10,200),1) # number of variants associated with both
sp=sample(c(1.5,3),1) # SD of effect sizpe distribution for associations with A
sq=sample(c(1.5,3),1) # SD of effect sizpe distribution for associations with B
} else {
alpha= 0.1 ###############################10^-runif(1,1,2)  # try and control FDR at this level
nsnp=round(10^runif(1,3,4))
n1p=sample(200,1) # number of variants associated ONLY with A (principal)
n1q=sample(200,1) # number of variants associated ONLY with B (principal)
n1pq=sample(200,1) # number of variants associated with both
sp=runif(1,1.5,3) # SD of effect sizpe distribution for associations with A
sq=runif(1,1.5,3) # SD of effect sizpe distribution for associations with B
}
pi1_a=n1p/nsnp; pi1_b=n1q/nsnp; pi1_pl=n1pq/nsnp
atol=100 # allow p*n/rank(p) to exceed alpha by this proportion
###########################################################################
## Simulation data ########################################################
###########################################################################
if (distx==1) {
zp=c(rnorm(n1pq,sd=sp),rnorm(n1p,sd=sp),rnorm(nsnp-n1p-n1pq,sd=1))
zq=c(rnorm(n1pq,sd=sq),rnorm(n1p,sd=1),rnorm(n1q,sd=sq),rnorm(nsnp-n1p-n1pq-n1q,sd=1))
}
if (distx==2) {
zp=c(rt(n1pq,df=3)*sp,rt(n1p,df=3)*sp,rnorm(nsnp-n1p-n1pq,sd=1))
zq=c(rt(n1pq,df=3)*sq,rnorm(n1p,sd=1),rt(n1q,df=3)*sq,rnorm(nsnp-n1p-n1pq-n1q,sd=1))
}
if (distx==3) {
zp=c(rcauchy(n1pq,sc=sp),rcauchy(n1p,sc=sp),rnorm(nsnp-n1p-n1pq,sd=1))
zq=c(rcauchy(n1pq,sc=sq),rnorm(n1p,sd=1),rcauchy(n1q,sc=sq),rnorm(nsnp-n1p-n1pq-n1q,sd=1))
}
# P-values
p=2*pnorm(-abs(zp))
q=2*pnorm(-abs(zq))
mp=min(p[which(p>0)]); p[which(p==0)]=mp
mq=min(q[which(q>0)]); q[which(q==0)]=mq
zp=-qnorm(p/2); zq=-qnorm(q/2)
# H (hypothesis indicators)
if (n1pq+n1p > 0) h1a=1:(n1pq+n1p) else h1a=c()
h0a=setdiff(1:nsnp, h1a)
# Fit four-groups model
p1x=max(min(1-pi1_a-pi1_b-pi1_pl,0.99),0.005)
#pars0=c(p1x,
#        max(min(pi1_b+pi1_pl,1-p1x-0.005),0.005),sa,sb,sb,0)
mxit=1000
fitx=fit.4g(cbind(zp,zq),maxit=mxit)
pars=fitx$pars
conv=dim(fitx$hist)[1] < mxit
# Folds for method 3
nfold=3
fold=rep(1:nfold,1+floor(nsnp/nfold))[1:nsnp][order(runif(nsnp))]
# Parmameters for underlying distribution of zpj
ff=tryCatch(fit.2g(q[which(p>0.5)]),
error=function(e) list(pars=c(0.5,1)), warning=function(w) list(pars=c(0.5,1)))
pi0_null = c(1-(n1q/(nsnp-n1p-n1pq)),ff$pars[1])
sigma_null = c(sq,ff$pars[2])
dist_null = c(distx,1)
# Potential rejections
subx=which(log10(p)+log10(q) < -2)
cf=cfdr(p,q,sub=subx)
sub=which(cf<6*alpha)
if (length(sub)<30) sub=order(cf)[1:30]
###########################################################################
## Save procedure #########################################################
###########################################################################
vars=c("hit_p",as.vector(
outer(as.vector(
outer(as.vector(
outer(as.vector(
outer(0:1,1:5,function(x,y) paste0("_fdr",y,"_adj",x))),
1:2,function(x,y) paste0(x,"_dist",y))),
1:3,function(x,y) paste0("hit_cf",y,x))),
c("",paste0("_fold",1:nfold)),function(x,y) paste0(x,y))))
vars=vars[which(
(grepl("fdr3",vars) & grepl("fold",vars)) |
(!grepl("fold",vars)))]
vars=gsub("fdr5","fdr3b",vars)
save_vec=function() {
fdp_vec=c()
t2r_vec=c()
for (i in 1:length(vars)) {
if (exists(vars[i])) {
hitx=get(vars[i])
# false discovery proportions
if (length(hitx)>0) {
if (hitx[1]>0) {
fdp=length(intersect(hitx,h0a))/length(hitx)
} else fdp=-1
} else fdp=0 # false-discovery proportion by p-value
# assign(gsub("hit","fdp",vars[i]),fdp)
fdp_vec=c(fdp_vec,fdp)
# type-2 error rate
t2r=length(intersect(hitx,h1a))/length(h1a)
# assign(gsub("hit","t2r",vars[i]),t2r)
t2r_vec=c(t2r_vec,t2r)
} else {
fdp_vec=c(fdp_vec,-1)
t2r_vec=c(t2r_vec,-1)
}
}
state_vec=c(seed,alpha,nsnp,dist_null,n1p,n1q,n1pq,sp,sq,pars,conv,ff$pars)
names(state_vec)=c("seed","alpha","N","dist1","dist2","n1p","n1q","n1pq","sp","sq",
paste0("fit_",c("pi0","pi1","pi2","tau1","tau2","s1","s2","conv")),"pi0_null","sigma_null")
names(fdp_vec)=gsub("hit","fdp",vars)
names(t2r_vec)=gsub("hit","t2r",vars)
out=c(state_vec,fdp_vec,t2r_vec)
write(out,file=paste0(home_dir,"cfdr/sims/fdrsim/cfdrsim",seed,".txt0"),ncol=length(out))
}
###########################################################################
## Rejections with p-value: Benjamini-Hochberg procedure ##################
###########################################################################
# Rejections with p-value: Benjamini-Hochberg procedure
rp=rank(p)
hit_p0=which(p< alpha*rank(p)/length(p))
if (length(hit_p0)> 0) hit_p=which(rp <= max(rp[hit_p0])) else hit_p=c()
###########################################################################
## Standard non-parametric FDR ############################################
###########################################################################
# Needed several times
vLf=vl(p,q,indices=sub,mode=0,adj=F);
